@using intelometry_app.Models

<div class="row align-items-center p-2">
    <div class="col-lg-8 d-flex">
        <nav aria-label="Page navigation">
            <ul class="pagination mb-0">
                @foreach (var link in links!)
                {
                    <li class="page-item @(link.Enabled ? null : "disabled")
                                         @(link.Active ? "active" : null)">
                        <button type="button" class="page-link"
                            @onclick="() => SelectPage(link)">
                            @link.Text
                        </button>
                    </li>
                }
            </ul>
        </nav>
        <select class="form-select w-25 ms-2" value="@CurrentPageSize" @onchange="SelectPageSize">
            @for (int i = 10; i <= 30; i += 5)
            {
                <option value="@i">@i</option>
            }
        </select>
    </div>

    <div class="col-lg-4 text-md-end">
        <small>@CurrentPage of @TotalPages pages (@TotalRecords items)</small>
    </div>
</div>

@code {
    private List<PageLinkModel>? links;

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int CurrentPageSize { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public int TotalRecords { get; set; }

    [Parameter]
    public int Range { get; set; } = 2;

    [Parameter]
    public EventCallback<int> OnSelectPage { get; set; }

    [Parameter]
    public EventCallback<int> OnSelectPageSize { get; set; }

    protected override void OnParametersSet()
    {
        LoadPaginator();
    }

    private void LoadPaginator()
    {
        links = new List<PageLinkModel>();

        int firstPage = 1;
        int lastPage = TotalPages;

        int nextPage = CurrentPage + 1;
        int previousPage = CurrentPage - 1;

        bool hasPreviousPage = CurrentPage > 1;
        bool hasNextPage = CurrentPage < TotalPages;

        links.Add(new PageLinkModel(firstPage, hasPreviousPage, $"\u00AB"));
        links.Add(new PageLinkModel(previousPage, hasPreviousPage, $"\u2039"));

        for (int i = 1; i <= TotalPages; i++)
        {
            if (i >= CurrentPage - Range && i <= CurrentPage + Range)
            {
                links.Add(new PageLinkModel(i) { Active = CurrentPage == i });
            }
        }

        links.Add(new PageLinkModel(nextPage, hasNextPage, $"\u203A"));
        links.Add(new PageLinkModel(lastPage, hasNextPage, $"\u00BB"));
    }

    private async Task SelectPage(PageLinkModel link)
    {
        if (link.Page == CurrentPage) return;
        if (!link.Enabled) return;

        CurrentPage = link.Page;
        await OnSelectPage.InvokeAsync(link.Page);
    }

    private async Task SelectPageSize(ChangeEventArgs e)
    {      
        if (e.Value is not null)
        {
            if (CurrentPageSize == Convert.ToInt32(e.Value)) return;

            CurrentPageSize = Convert.ToInt32(e.Value);
            await OnSelectPageSize.InvokeAsync(Convert.ToInt32(e.Value));
        }
    }
}
